version: '3.8'

services:
  # API Server
  api:
    build:
      context: ../../packages/api
      dockerfile: ../../docker/staging/Dockerfile.api
    container_name: storyslip-api-staging
    environment:
      - NODE_ENV=production
      - ENVIRONMENT=staging
    env_file:
      - ../../environments/staging/.env.staging
    ports:
      - "3001:3001"
    volumes:
      - api_logs:/app/logs
    networks:
      - storyslip-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Dashboard Application
  dashboard:
    build:
      context: ../../packages/dashboard
      dockerfile: ../../docker/staging/Dockerfile.dashboard
    container_name: storyslip-dashboard-staging
    environment:
      - NODE_ENV=production
      - ENVIRONMENT=staging
    env_file:
      - ../../environments/staging/.env.staging
    ports:
      - "3000:3000"
    networks:
      - storyslip-network
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Marketing Website
  marketing:
    build:
      context: ../../packages/marketing
      dockerfile: ../../docker/staging/Dockerfile.marketing
    container_name: storyslip-marketing-staging
    environment:
      - NODE_ENV=production
      - ENVIRONMENT=staging
    env_file:
      - ../../environments/staging/.env.staging
    ports:
      - "3002:3002"
    networks:
      - storyslip-network
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Widget CDN Server
  widget-cdn:
    build:
      context: ../../packages/widget
      dockerfile: ../../docker/staging/Dockerfile.widget
    container_name: storyslip-widget-staging
    environment:
      - NODE_ENV=production
      - ENVIRONMENT=staging
    env_file:
      - ../../environments/staging/.env.staging
    ports:
      - "3003:3003"
    networks:
      - storyslip-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: storyslip-nginx-staging
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /etc/ssl/private:/etc/ssl/private:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - dashboard
      - marketing
      - widget-cdn
    networks:
      - storyslip-network
    restart: unless-stopped

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: storyslip-redis-staging
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/staging.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - storyslip-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: storyslip-prometheus-staging
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - storyslip-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: storyslip-grafana-staging
    ports:
      - "3004:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/staging:/etc/grafana/provisioning:ro
    networks:
      - storyslip-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: storyslip-loki-staging
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-staging.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - storyslip-network
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:latest
    container_name: storyslip-promtail-staging
    volumes:
      - ./monitoring/promtail-staging.yml:/etc/promtail/config.yml:ro
      - api_logs:/var/log/api:ro
      - nginx_logs:/var/log/nginx:ro
    networks:
      - storyslip-network
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

  # Backup Service
  backup:
    build:
      context: ../../scripts
      dockerfile: ../docker/staging/Dockerfile.backup
    container_name: storyslip-backup-staging
    environment:
      - ENVIRONMENT=staging
    env_file:
      - ../../environments/staging/.env.staging
    volumes:
      - backup_data:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - storyslip-network
    restart: unless-stopped
    command: crond -f

volumes:
  api_logs:
  nginx_logs:
  redis_data:
  prometheus_data:
  grafana_data:
  loki_data:
  backup_data:

networks:
  storyslip-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16