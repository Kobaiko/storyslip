version: '3.8'

services:
  # PostgreSQL Database for Development
  postgres:
    image: postgres:15-alpine
    container_name: storyslip-postgres-dev
    environment:
      POSTGRES_DB: storyslip_development
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - storyslip-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: storyslip-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - storyslip-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Server
  api:
    build:
      context: ../../packages/api
      dockerfile: ../../docker/development/Dockerfile.api
    container_name: storyslip-api-dev
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/storyslip_development
      - REDIS_URL=redis://redis:6379
    ports:
      - "3001:3001"
    volumes:
      - ../../packages/api:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - storyslip-network
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dashboard Application
  dashboard:
    build:
      context: ../../packages/dashboard
      dockerfile: ../../docker/development/Dockerfile.dashboard
    container_name: storyslip-dashboard-dev
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ../../packages/dashboard:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - storyslip-network
    command: npm run dev

  # Marketing Website
  marketing:
    build:
      context: ../../packages/marketing
      dockerfile: ../../docker/development/Dockerfile.marketing
    container_name: storyslip-marketing-dev
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
    ports:
      - "3002:3002"
    volumes:
      - ../../packages/marketing:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - storyslip-network
    command: npm run dev

  # Widget Development Server
  widget:
    build:
      context: ../../packages/widget
      dockerfile: ../../docker/development/Dockerfile.widget
    container_name: storyslip-widget-dev
    environment:
      - NODE_ENV=development
    ports:
      - "3003:3003"
    volumes:
      - ../../packages/widget:/app
      - /app/node_modules
    networks:
      - storyslip-network
    command: npm run dev

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: storyslip-nginx-dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/development.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
      - dashboard
      - marketing
    networks:
      - storyslip-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: storyslip-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - storyslip-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: storyslip-grafana-dev
    ports:
      - "3004:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - storyslip-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  storyslip-network:
    driver: bridge