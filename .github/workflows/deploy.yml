name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      dashboard-image: ${{ steps.meta-dashboard.outputs.tags }}
      widget-image: ${{ steps.meta-widget.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build API image
      - name: Extract API metadata
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/api/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Build Dashboard image
      - name: Extract Dashboard metadata
        id: meta-dashboard
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dashboard
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Dashboard image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/dashboard/Dockerfile
          push: true
          tags: ${{ steps.meta-dashboard.outputs.tags }}
          labels: ${{ steps.meta-dashboard.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Build Widget CDN image
      - name: Extract Widget metadata
        id: meta-widget
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/widget
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Widget image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/widget/Dockerfile
          push: true
          tags: ${{ steps.meta-widget.outputs.tags }}
          labels: ${{ steps.meta-widget.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Database migrations
  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: |
          cd packages/api
          pnpm install --frozen-lockfile

      - name: Run database migrations
        run: |
          cd packages/api
          pnpm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Verify migration status
        run: |
          cd packages/api
          pnpm run db:status
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Deploy to Kubernetes
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, migrate-database]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          
          # Update image tags in deployment manifests
          sed -i "s|IMAGE_TAG_API|${{ needs.build-images.outputs.api-image }}|g" k8s/staging/api-deployment.yaml
          sed -i "s|IMAGE_TAG_DASHBOARD|${{ needs.build-images.outputs.dashboard-image }}|g" k8s/staging/dashboard-deployment.yaml
          sed -i "s|IMAGE_TAG_WIDGET|${{ needs.build-images.outputs.widget-image }}|g" k8s/staging/widget-deployment.yaml
          
          # Apply configurations
          kubectl apply -f k8s/staging/namespace.yaml
          kubectl apply -f k8s/staging/configmap.yaml
          kubectl apply -f k8s/staging/secrets.yaml
          kubectl apply -f k8s/staging/
          
          # Wait for rollout to complete
          kubectl rollout status deployment/storyslip-api -n storyslip-staging --timeout=600s
          kubectl rollout status deployment/storyslip-dashboard -n storyslip-staging --timeout=600s
          kubectl rollout status deployment/storyslip-widget -n storyslip-staging --timeout=600s

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Test API health
          curl -f https://api-staging.storyslip.com/health || exit 1
          
          # Test Dashboard
          curl -f https://dashboard-staging.storyslip.com/ || exit 1
          
          # Test Widget CDN
          curl -f https://widget-staging.storyslip.com/embed.js || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, migrate-database]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production
        run: |
          export KUBECONFIG=kubeconfig
          
          # Update image tags in deployment manifests
          sed -i "s|IMAGE_TAG_API|${{ needs.build-images.outputs.api-image }}|g" k8s/production/api-deployment.yaml
          sed -i "s|IMAGE_TAG_DASHBOARD|${{ needs.build-images.outputs.dashboard-image }}|g" k8s/production/dashboard-deployment.yaml
          sed -i "s|IMAGE_TAG_WIDGET|${{ needs.build-images.outputs.widget-image }}|g" k8s/production/widget-deployment.yaml
          
          # Apply configurations
          kubectl apply -f k8s/production/namespace.yaml
          kubectl apply -f k8s/production/configmap.yaml
          kubectl apply -f k8s/production/secrets.yaml
          kubectl apply -f k8s/production/
          
          # Wait for rollout to complete
          kubectl rollout status deployment/storyslip-api -n storyslip-production --timeout=600s
          kubectl rollout status deployment/storyslip-dashboard -n storyslip-production --timeout=600s
          kubectl rollout status deployment/storyslip-widget -n storyslip-production --timeout=600s

      - name: Run production smoke tests
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Test API health
          curl -f https://api.storyslip.com/health || exit 1
          
          # Test Dashboard
          curl -f https://app.storyslip.com/ || exit 1
          
          # Test Widget CDN
          curl -f https://widget.storyslip.com/embed.js || exit 1

  # CDN deployment for widget
  deploy-cdn:
    name: Deploy Widget to CDN
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies and build widget
        run: |
          cd packages/widget
          pnpm install --frozen-lockfile
          pnpm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to S3 and CloudFront
        run: |
          # Upload to S3
          aws s3 sync packages/widget/dist/ s3://${{ secrets.S3_BUCKET_WIDGET }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --metadata-directive REPLACE

          # Set cache control for HTML files
          aws s3 cp s3://${{ secrets.S3_BUCKET_WIDGET }}/ s3://${{ secrets.S3_BUCKET_WIDGET }}/ \
            --recursive \
            --exclude "*" \
            --include "*.html" \
            --cache-control "public, max-age=300" \
            --metadata-directive REPLACE

          # Invalidate CloudFront cache
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  # Backup before deployment
  backup-database:
    name: Backup Database
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create database backup
        run: |
          # Create backup filename with timestamp
          BACKUP_NAME="storyslip-backup-$(date +%Y%m%d-%H%M%S).sql"
          
          # Create database backup
          pg_dump ${{ secrets.DATABASE_URL }} > $BACKUP_NAME
          
          # Compress backup
          gzip $BACKUP_NAME
          
          # Upload to S3
          aws s3 cp ${BACKUP_NAME}.gz s3://${{ secrets.S3_BUCKET_BACKUPS }}/database/
          
          # Clean up local file
          rm ${BACKUP_NAME}.gz

  # Post-deployment verification
  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run end-to-end tests
        run: |
          cd packages/api
          pnpm run test:e2e
        env:
          API_BASE_URL: https://api.storyslip.com
          DASHBOARD_BASE_URL: https://app.storyslip.com

      - name: Run performance tests
        run: |
          # Install k6
          curl https://github.com/grafana/k6/releases/download/v0.46.0/k6-v0.46.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1
          
          # Run load tests
          ./k6 run scripts/load-test.js

      - name: Check service health
        run: |
          # API health check
          response=$(curl -s -o /dev/null -w "%{http_code}" https://api.storyslip.com/health)
          if [ $response -ne 200 ]; then
            echo "API health check failed with status $response"
            exit 1
          fi
          
          # Dashboard health check
          response=$(curl -s -o /dev/null -w "%{http_code}" https://app.storyslip.com/)
          if [ $response -ne 200 ]; then
            echo "Dashboard health check failed with status $response"
            exit 1
          fi
          
          # Widget CDN health check
          response=$(curl -s -o /dev/null -w "%{http_code}" https://widget.storyslip.com/embed.js)
          if [ $response -ne 200 ]; then
            echo "Widget CDN health check failed with status $response"
            exit 1
          fi

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production, post-deployment-tests]
    environment: production
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Rollback deployment
        run: |
          export KUBECONFIG=kubeconfig
          
          # Rollback to previous version
          kubectl rollout undo deployment/storyslip-api -n storyslip-production
          kubectl rollout undo deployment/storyslip-dashboard -n storyslip-production
          kubectl rollout undo deployment/storyslip-widget -n storyslip-production
          
          # Wait for rollback to complete
          kubectl rollout status deployment/storyslip-api -n storyslip-production --timeout=600s
          kubectl rollout status deployment/storyslip-dashboard -n storyslip-production --timeout=600s
          kubectl rollout status deployment/storyslip-widget -n storyslip-production --timeout=600s

  # Notifications
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-tests]
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Slack on success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: '🚀 Production deployment successful!'

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-tests]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Slack on failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: '❌ Production deployment failed! Rollback initiated.'