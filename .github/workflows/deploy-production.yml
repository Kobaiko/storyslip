name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'

env:
  NODE_VERSION: '18'
  ENVIRONMENT: production

jobs:
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify staging deployment
      run: |
        # Ensure staging is healthy before production deployment
        curl -f https://api-staging.storyslip.com/api/monitoring/health
        curl -f https://app-staging.storyslip.com/health
        curl -f https://staging.storyslip.com/health
        
    - name: Run pre-deployment tests
      run: |
        # Run comprehensive tests against staging
        npm ci
        npm run test:staging:comprehensive
        
    - name: Security verification
      run: |
        # Verify no critical security issues
        npm audit --audit-level=critical
        
    - name: Performance baseline check
      run: |
        # Ensure performance meets baseline
        npm run test:performance:baseline

  build-production:
    name: Build for Production
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd packages/api && npm ci
        cd ../dashboard && npm ci
        cd ../marketing && npm ci
        cd ../widget && npm ci
        
    - name: Setup production environment
      run: |
        cp environments/production/.env.production packages/api/.env
        cp environments/production/.env.production packages/dashboard/.env
        cp environments/production/.env.production packages/marketing/.env
        cp environments/production/.env.production packages/widget/.env
        
    - name: Build with optimizations
      run: |
        # Build API with production optimizations
        cd packages/api
        npm run build:production
        
        # Build Dashboard with production optimizations
        cd ../dashboard
        npm run build:production
        
        # Build Marketing site with production optimizations
        cd ../marketing
        npm run build:production
        
        # Build Widget with production optimizations
        cd ../widget
        npm run build:production
        
    - name: Run production build tests
      run: |
        # Test production builds
        npm run test:build:production
        
    - name: Create production artifacts
      run: |
        mkdir -p artifacts/production
        
        # Create versioned artifacts
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ "$VERSION" == "refs/heads/main" ]]; then
          VERSION=$(date +%Y%m%d-%H%M%S)
        fi
        
        tar -czf artifacts/production/api-${VERSION}.tar.gz -C packages/api dist package.json package-lock.json
        tar -czf artifacts/production/dashboard-${VERSION}.tar.gz -C packages/dashboard dist package.json package-lock.json
        tar -czf artifacts/production/marketing-${VERSION}.tar.gz -C packages/marketing .next package.json package-lock.json
        tar -czf artifacts/production/widget-${VERSION}.tar.gz -C packages/widget dist package.json package-lock.json
        
        # Create deployment manifest
        echo "VERSION=${VERSION}" > artifacts/production/manifest.env
        echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> artifacts/production/manifest.env
        echo "COMMIT_SHA=${GITHUB_SHA}" >> artifacts/production/manifest.env
        
    - name: Upload production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: production-artifacts
        path: artifacts/production/
        retention-days: 90

  deploy-database:
    name: Deploy Database Changes
    runs-on: ubuntu-latest
    needs: build-production
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Backup production database
      run: |
        # Create database backup before migration
        supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF_PRODUCTION }}
        supabase db dump --file backup-$(date +%Y%m%d-%H%M%S).sql
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: Deploy database migrations
      run: |
        # Deploy migrations with rollback capability
        supabase db push --dry-run
        supabase db push
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: Verify database health
      run: |
        # Verify database is healthy after migration
        supabase db ping

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-production, deploy-database]
    environment: production
    
    strategy:
      matrix:
        service: [api, dashboard, marketing]
      max-parallel: 1 # Deploy one service at a time
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download production artifacts
      uses: actions/download-artifact@v3
      with:
        name: production-artifacts
        path: artifacts/production/
        
    - name: Load deployment manifest
      run: |
        source artifacts/production/manifest.env
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
        echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
        
    - name: Deploy ${{ matrix.service }} to production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          # Create deployment directory
          mkdir -p /var/www/storyslip-production/${{ matrix.service }}
          cd /var/www/storyslip-production/${{ matrix.service }}
          
          # Create backup of current deployment
          if [ -d "current" ]; then
            mv current backup-$(date +%Y%m%d-%H%M%S)
            # Keep only last 5 backups
            ls -t backup-* | tail -n +6 | xargs rm -rf
          fi
          
          # Create new deployment directory
          mkdir -p current
          
    - name: Upload ${{ matrix.service }} to production
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        source: "artifacts/production/${{ matrix.service }}-${{ env.VERSION }}.tar.gz"
        target: "/var/www/storyslip-production/${{ matrix.service }}/current/"
        
    - name: Setup ${{ matrix.service }} production deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          cd /var/www/storyslip-production/${{ matrix.service }}/current
          
          # Extract artifact
          tar -xzf artifacts/production/${{ matrix.service }}-${{ env.VERSION }}.tar.gz
          
          # Install production dependencies
          npm ci --production --silent
          
          # Setup environment
          cp /etc/storyslip/production/.env .env
          
          # Graceful service restart
          sudo systemctl reload storyslip-${{ matrix.service }}-production || sudo systemctl restart storyslip-${{ matrix.service }}-production
          
          # Wait for service to be ready
          sleep 30
          
    - name: Health check ${{ matrix.service }}
      run: |
        case "${{ matrix.service }}" in
          api)
            curl -f https://api.storyslip.com/api/monitoring/health
            ;;
          dashboard)
            curl -f https://app.storyslip.com/health
            ;;
          marketing)
            curl -f https://storyslip.com/health
            ;;
        esac
        
    - name: Rollback on failure
      if: failure()
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          cd /var/www/storyslip-production/${{ matrix.service }}
          
          # Find latest backup
          BACKUP=$(ls -t backup-* | head -n 1)
          
          if [ -n "$BACKUP" ]; then
            # Stop current service
            sudo systemctl stop storyslip-${{ matrix.service }}-production
            
            # Restore backup
            rm -rf current
            mv $BACKUP current
            
            # Restart service
            sudo systemctl start storyslip-${{ matrix.service }}-production
            
            echo "Rollback completed for ${{ matrix.service }}"
          fi

  post-deployment:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy-production
    
    steps:
    - name: Warm up production services
      run: |
        # Warm up all production endpoints
        curl -s https://api.storyslip.com/api/monitoring/health
        curl -s https://app.storyslip.com/
        curl -s https://storyslip.com/
        
    - name: Run production smoke tests
      run: |
        # Run comprehensive smoke tests
        npm ci
        npm run test:smoke:production
        
    - name: Update CDN cache
      run: |
        # Invalidate CDN cache for updated assets
        curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data '{"purge_everything":true}'
          
    - name: Update monitoring dashboards
      run: |
        # Update Grafana dashboards with new deployment info
        curl -X POST "${{ secrets.GRAFANA_API_URL }}/api/annotations" \
          -H "Authorization: Bearer ${{ secrets.GRAFANA_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data '{
            "text": "Production deployment completed - Version: ${{ env.VERSION }}",
            "tags": ["deployment", "production"],
            "time": '$(date +%s000)'
          }'
          
    - name: Notify stakeholders
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: |
          🎉 Production deployment successful!
          Version: ${{ env.VERSION }}
          Commit: ${{ env.COMMIT_SHA }}
          🌐 https://storyslip.com
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()
      
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        body: |
          ## Production Deployment - ${{ env.VERSION }}
          
          **Deployed on:** ${{ env.BUILD_DATE }}
          **Commit:** ${{ env.COMMIT_SHA }}
          
          ### Changes
          - See commit history for detailed changes
          
          ### Services Deployed
          - ✅ API Server
          - ✅ Dashboard Application  
          - ✅ Marketing Website
          - ✅ Widget System
          
          ### Health Status
          - API: https://api.storyslip.com/api/monitoring/health
          - Dashboard: https://app.storyslip.com
          - Marketing: https://storyslip.com
        draft: false
        prerelease: false

  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-production]
    environment: production
    
    steps:
    - name: Execute emergency rollback
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          # Rollback all services
          for service in api dashboard marketing; do
            cd /var/www/storyslip-production/$service
            
            BACKUP=$(ls -t backup-* | head -n 1)
            if [ -n "$BACKUP" ]; then
              sudo systemctl stop storyslip-$service-production
              rm -rf current
              mv $BACKUP current
              sudo systemctl start storyslip-$service-production
            fi
          done
          
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        text: |
          🚨 EMERGENCY ROLLBACK EXECUTED
          Production deployment failed and has been rolled back.
          Please investigate immediately!
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}