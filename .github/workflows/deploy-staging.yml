name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  ENVIRONMENT: staging

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: storyslip_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd packages/api && npm ci
        cd ../dashboard && npm ci
        cd ../marketing && npm ci
        cd ../widget && npm ci
        
    - name: Setup test environment
      run: |
        cp environments/development/.env.development packages/api/.env
        cp environments/development/.env.development packages/dashboard/.env
        cp environments/development/.env.development packages/marketing/.env
        cp environments/development/.env.development packages/widget/.env
        
    - name: Run database migrations
      run: |
        cd packages/api
        npm run migrate
        
    - name: Run unit tests
      run: |
        npm run test:unit
        
    - name: Run integration tests
      run: |
        npm run test:integration
        
    - name: Run security tests
      run: |
        npm run test:security
        
    - name: Run performance tests
      run: |
        npm run test:performance
        
    - name: Generate test coverage
      run: |
        npm run test:coverage
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd packages/api && npm ci
        cd ../dashboard && npm ci
        cd ../marketing && npm ci
        cd ../widget && npm ci
        
    - name: Setup staging environment
      run: |
        cp environments/staging/.env.staging packages/api/.env
        cp environments/staging/.env.staging packages/dashboard/.env
        cp environments/staging/.env.staging packages/marketing/.env
        cp environments/staging/.env.staging packages/widget/.env
        
    - name: Build API
      run: |
        cd packages/api
        npm run build
        
    - name: Build Dashboard
      run: |
        cd packages/dashboard
        npm run build
        
    - name: Build Marketing Site
      run: |
        cd packages/marketing
        npm run build
        
    - name: Build Widget
      run: |
        cd packages/widget
        npm run build
        
    - name: Create deployment artifacts
      run: |
        mkdir -p artifacts
        tar -czf artifacts/api.tar.gz -C packages/api dist package.json package-lock.json
        tar -czf artifacts/dashboard.tar.gz -C packages/dashboard dist package.json package-lock.json
        tar -czf artifacts/marketing.tar.gz -C packages/marketing .next package.json package-lock.json
        tar -czf artifacts/widget.tar.gz -C packages/widget dist package.json package-lock.json
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: artifacts/
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: artifacts/
        
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Deploy database migrations
      run: |
        supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF_STAGING }}
        supabase db push
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          # Create deployment directory
          mkdir -p /var/www/storyslip-staging
          cd /var/www/storyslip-staging
          
          # Stop existing services
          sudo systemctl stop storyslip-api-staging || true
          sudo systemctl stop storyslip-dashboard-staging || true
          sudo systemctl stop storyslip-marketing-staging || true
          
          # Backup current deployment
          if [ -d "current" ]; then
            mv current backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Create new deployment directory
          mkdir -p current
          
    - name: Upload artifacts to staging
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        source: "artifacts/*"
        target: "/var/www/storyslip-staging/current/"
        
    - name: Extract and setup staging deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          cd /var/www/storyslip-staging/current
          
          # Extract artifacts
          tar -xzf artifacts/api.tar.gz -C api/
          tar -xzf artifacts/dashboard.tar.gz -C dashboard/
          tar -xzf artifacts/marketing.tar.gz -C marketing/
          tar -xzf artifacts/widget.tar.gz -C widget/
          
          # Install production dependencies
          cd api && npm ci --production
          cd ../dashboard && npm ci --production
          cd ../marketing && npm ci --production
          cd ../widget && npm ci --production
          
          # Setup environment files
          cp /etc/storyslip/staging/.env api/.env
          cp /etc/storyslip/staging/.env dashboard/.env
          cp /etc/storyslip/staging/.env marketing/.env
          cp /etc/storyslip/staging/.env widget/.env
          
          # Start services
          sudo systemctl start storyslip-api-staging
          sudo systemctl start storyslip-dashboard-staging
          sudo systemctl start storyslip-marketing-staging
          
          # Wait for services to start
          sleep 30
          
    - name: Run staging health checks
      run: |
        # Wait for deployment to complete
        sleep 60
        
        # Check API health
        curl -f https://api-staging.storyslip.com/api/monitoring/health
        
        # Check Dashboard health
        curl -f https://app-staging.storyslip.com/health
        
        # Check Marketing site health
        curl -f https://staging.storyslip.com/health
        
    - name: Run staging smoke tests
      run: |
        # Run basic smoke tests against staging
        npm run test:smoke:staging
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: 'üöÄ Staging deployment successful! https://staging.storyslip.com'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()
      
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        text: '‚ùå Staging deployment failed! Check the logs.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: deploy-staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run OWASP ZAP scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'https://staging.storyslip.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          report_html.html
          snyk-results.json