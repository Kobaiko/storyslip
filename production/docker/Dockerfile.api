# StorySlip API Production Dockerfile
# Multi-stage build for optimized production image

# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Copy package files
COPY package*.json ./
COPY packages/api/package*.json ./packages/api/

# Install dependencies
RUN npm ci --only=production --ignore-scripts

# Copy source code
COPY packages/api ./packages/api
COPY tsconfig.json ./

# Build the application
WORKDIR /app/packages/api
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S storyslip -u 1001

# Set working directory
WORKDIR /app

# Install production dependencies
RUN apk add --no-cache \
    dumb-init \
    curl \
    && rm -rf /var/cache/apk/*

# Copy built application
COPY --from=builder --chown=storyslip:nodejs /app/packages/api/dist ./dist
COPY --from=builder --chown=storyslip:nodejs /app/packages/api/package*.json ./
COPY --from=builder --chown=storyslip:nodejs /app/node_modules ./node_modules

# Create logs directory
RUN mkdir -p /app/logs && chown storyslip:nodejs /app/logs

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3001
ENV LOG_LEVEL=warn

# Expose port
EXPOSE 3001

# Switch to non-root user
USER storyslip

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3001/api/monitoring/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/index.js"]